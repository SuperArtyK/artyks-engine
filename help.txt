/*
	ArtyK's Console (Game) Engine. Console engine for apps and games
	Copyright (C) 2021  Artemii Kozhemiak

	This program is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

This file contains helpful information for the engine
eg documentation


----------------------------------------
var name cheatsheet:

<scope>_<datatype><Name>

EX:
m_bDev          |g_flgDeflogger|m_strMessg|l_strPathtolog
m:member;b:bool;|g:global;     |vec:vector|l:local

b bool
i int
c char
ll long long (int)
ull unsigned long long (int)/uint64_t
ld long double
trd thread
fst fstream
cst const
flg filelog
arr array
vec vector
ptr pointer
lpvd lpvoid


etc..
----------------------------------------

LOGGER:
example how to use :

filelog mylog("path/to/log");//this creates an obj from log class
//with the path to create the log file in "path/to/log"
//even on windows, use forward slash for the subdirectory dividing

filelog mylog2;
//without any std::string value("std::string"), it will default to log path ./logs/
//in the same directory as executable
//again it will type in log what you feed it

mylog.writetolog("Log is working!");//0 or any other number(or it's absense will result in INFO log entry
mylog.writetolog("This is warning", 1);
mylog.writetolog("This is error", 2);
mylog.writetolog("This is fatal error", 3);
mylog.writetolog("This is ok statement", 4);
mylog.writetolog("This is success statement", 5);
5





mylog2.writetolog("Log is working!", 0, "Logger");//3rd argument is optional, module of the program that message is being sent from
//but 2nd argument is required to be passed
//not passing(not leaving it blank!) will result in default "main" to be put in the module section
mylog2.writetolog("This is warning", 1, "YourTeacher");
mylog2.writetolog("This is error", 2, "GNU C/C++ Compiler");
mylog2.writetolog("This is fatal error", 3, "Game engine");


will result to this in the 1st log file in "/path/to/log" subdirectory

[2021 - 04 - 07.09:55 : 32][INFO][main]: Log is working!
[2021 - 04 - 07.09:55 : 32][WARN][main] : This is warning
[2021 - 04 - 07.09:55 : 32][ERROR][main] : This is error
[2021 - 04 - 07.09:55 : 32][FATAL ERROR][main] : This is fatal error
[2021 - 04 - 07.09:55 : 32][OK][main] : This is ok statement
[2021 - 04 - 07.09:55 : 32][SUCCESS][main] : This is success statement





Will result to this in the 2nd log file in "/logs/" subdirectory

[2021 - 04 - 07.09:55 : 32][INFO][Logger] : Log is working!
[2021 - 04 - 07.09:55 : 32][WARN][YourTeacher] : This is warning
[2021 - 04 - 07.09:55 : 32][ERROR][GNU C / C++ Compiler] : This is error
[2021 - 04 - 07.09:55 : 32][FATAL ERROR][Game engine] : This is fatal error
----------------------------------------





